import os
import sqlite3
import telebot
from dotenv import load_dotenv
import google.generativeai as genai
from datetime import datetime

# üîπ Carrega vari√°veis do .env
if os.path.exists(".env"):
    load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("‚ö†Ô∏è Falta definir TELEGRAM_TOKEN ou GEMINI_API_KEY.")

# üîπ Configura Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

# üîπ Configura o bot
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# üìå Prompt fixo
FINANCAS_PROMPT = """
Voc√™ √© um assistente de finan√ßas pessoais que ajuda diariamente o usu√°rio a:
- Organizar o or√ßamento
- Controlar gastos
- Definir metas financeiras
- Dar dicas de economia
- Orientar sobre investimentos b√°sicos

Responda de forma clara, pr√°tica e amig√°vel.
"""

# üóÑÔ∏è Configura√ß√£o do banco de dados SQLite
DB_FILE = "usuarios.db"

def inicializar_banco():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    # Tabela de usu√°rios
    cur.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        nome TEXT,
        data_registro TEXT
    )
    """)
    # Tabela de hist√≥rico
    cur.execute("""
    CREATE TABLE IF NOT EXISTS historico (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER,
        mensagem TEXT,
        resposta TEXT,
        data_hora TEXT
    )
    """)
    conn.commit()
    conn.close()

def registrar_usuario(telegram_id, nome):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT * FROM usuarios WHERE telegram_id=?", (telegram_id,))
    if cur.fetchone() is None:
        cur.execute("INSERT INTO usuarios (telegram_id, nome, data_registro) VALUES (?, ?, ?)",
                    (telegram_id, nome, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    conn.close()

def salvar_historico(telegram_id, mensagem, resposta):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("INSERT INTO historico (telegram_id, mensagem, resposta, data_hora) VALUES (?, ?, ?, ?)",
                (telegram_id, mensagem, resposta, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

# üì© Responde mensagens
@bot.message_handler(func=lambda message: True)
def responder(message):
    try:
        # Registra usu√°rio
        registrar_usuario(message.from_user.id, message.from_user.first_name)

        prompt_usuario = message.text
        prompt_final = f"{FINANCAS_PROMPT}\n\nPergunta do usu√°rio: {prompt_usuario}"

        resposta = model.generate_content(prompt_final)
        texto_resposta = resposta.text if resposta and hasattr(resposta, 'text') else "N√£o consegui gerar resposta agora."

        # Salva no hist√≥rico
        salvar_historico(message.from_user.id, prompt_usuario, texto_resposta)

        bot.reply_to(message, texto_resposta)
    except Exception as e:
        bot.reply_to(message, f"‚ùå Ocorreu um erro: {e}")

# ‚ñ∂Ô∏è Inicia o bot
if __name__ == "__main__":
    inicializar_banco()
    print("üí∞ Bot de Finan√ßas Pessoais com registro de usu√°rios online...")
    bot.polling(none_stop=True)
